<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
         
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.github.johnomalley</groupId>
    <artifactId>jsdi</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <name>Javascript DI Framework</name>
    <packaging>jar</packaging>

    <dependencies>
        <dependency>
            <groupId>com.jquery</groupId>
            <artifactId>jquery</artifactId>
            <version>1.6.1</version>
            <type>js</type>
        </dependency>

        <!-- Test -->
        <dependency>
            <groupId>com.jquery</groupId>
            <artifactId>qunit</artifactId>
            <version>25e4489</version>
            <type>js</type>
            <scope>test</scope>
        </dependency>
        
		<dependency>
			<groupId>org.codehaus.jstestrunner</groupId>
			<artifactId>jstestrunner-junit</artifactId>
			<version>0.0.1-SNAPSHOT</version>
			<scope>test</scope>
		</dependency>
    </dependencies>

    <build>
        <!-- Configure our resources so that html files are not copied (the js
            import plugin needs to process and copy them) and declare the location of
            js files. Ultimately this will be automatically configured given packaging
            and extensions, but for now we specify this explicitly. -->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <excludes>
                    <exclude>**/*.html</exclude>
                </excludes>
            </resource>
            <resource>
                <directory>src/main/js</directory>
                <includes>
                    <include>**/*.js</include>
                </includes>
                <targetPath>js</targetPath>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <excludes>
                    <exclude>**/*.html</exclude>
                </excludes>
            </testResource>
            <testResource>
                <directory>src/test/js</directory>
                <includes>
                    <include>**/*.js</include>
                </includes>
                <targetPath>js</targetPath>
            </testResource>
        </testResources>

        <plugins>
            <!-- As we of are packaging type jar, given that we need to control the
                packaging via assembly (the war plugin doesn't fit our directory layout),
                we must bring in each typical Maven plugin that gets used in a project and
                specify the goals we need. The goals generally have default lifecycles. -->

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.5</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>resources</goal>
                            <goal>testResources</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.2</version>
                <configuration>
                    <source>1.6</source>
                    <target>1.6</target>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <!-- Restore this as the Monsanto root POM sets the working directory to the test folder itself.
                    This then effects the jstestrunner which needs to assume that it is working at the same level
                    as the pom file (by default). -->
                    <workingDirectory>${basedir}</workingDirectory>
                    <systemPropertyVariables>
                        <org.codehaus.jstestrunner.commandPattern>${org.codehaus.jstestrunner.commandPattern}</org.codehaus.jstestrunner.commandPattern>
                    </systemPropertyVariables>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>test</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Control how we want to build the war via the assembly plugin. The
                Maven War Plugin doesn't give us sufficient control in this regard; particularly
                given some server side include configuration we want. -->
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>2.2</version>
                <configuration>
                    <descriptors>
                        <descriptor>assembly.xml</descriptor>
                    </descriptors>
                    <appendAssemblyId>false</appendAssemblyId>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- For use during development. -->
            <plugin>
                <groupId>org.mortbay.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>7.4.2.v20110526</version>
                <configuration>
                    <webAppConfig>
                        <descriptor>dev-jetty-web.xml</descriptor>
                        <contextPath>/ftq</contextPath>
                        <resourceBases>
                            <resourceBase>${project.build.outputDirectory}</resourceBase>
                            <resourceBase>${project.build.testOutputDirectory}</resourceBase>
                        </resourceBases>
                    </webAppConfig>
                </configuration>
            </plugin>

            <!-- Special plugins for JS development. -->
            <plugin>
                <groupId>org.codehaus.mojo.jslint</groupId>
                <artifactId>jslint-plugin</artifactId>
                <version>1.0.0-SNAPSHOT</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>main-jslint</goal>
                            <goal>test-jslint</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <failOnIssues>false</failOnIssues>
                    <disallowDanglingUnderbarInIdentifiers>false</disallowDanglingUnderbarInIdentifiers>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo.jsimport</groupId>
                <artifactId>js-import-plugin</artifactId>
                <version>1.0.0-SNAPSHOT</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>main-import-js</goal>
                            <goal>main-generate-html</goal>
                            <goal>test-import-js</goal>
                            <goal>test-generate-html</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>


</project>